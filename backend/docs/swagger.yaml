basePath: /api
definitions:
  controllers.CreateChatroomRequest:
    properties:
      name:
        description: The name of the chatroom
        example: General Chat
        maxLength: 100
        minLength: 3
        type: string
    required:
    - name
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
  controllers.SendMessageRequest:
    properties:
      media_url:
        description: URL of the media (required for picture, audio, video, text_and_picture,
          text_and_audio, text_and_video)
        example: /media/images/abc123.jpg
        type: string
      message_type:
        description: 'Type of message: text, picture, audio, video, text_and_picture,
          text_and_audio, text_and_video'
        enum:
        - text
        - picture
        - audio
        - video
        - text_and_picture
        - text_and_audio
        - text_and_video
        example: text
        type: string
      text_content:
        description: Text content of the message (required for text, text_and_picture,
          text_and_audio, text_and_video)
        example: Hello, how are you?
        type: string
    required:
    - message_type
    type: object
  models.ChatroomMember:
    properties:
      joined_at:
        description: The timestamp when the user joined the chatroom
        type: string
      user_id:
        description: The ID of the user
        example: 1
        type: integer
      username:
        description: The username of the user
        example: johndoe
        type: string
    type: object
  models.ChatroomResponse:
    properties:
      created_at:
        description: The timestamp when the chatroom was created
        type: string
      created_by:
        description: The ID of the user who created the chatroom
        example: 1
        type: integer
      id:
        description: The unique identifier of the chatroom
        example: 60d5f8b8e6b5f0b3e8b4b5b3
        type: string
      members:
        description: The list of members in the chatroom
        items:
          $ref: '#/definitions/models.ChatroomMember'
        type: array
      name:
        description: The name of the chatroom
        example: General Chat
        type: string
    type: object
  models.MessageResponse:
    properties:
      chatroom_id:
        description: ID of the chatroom where the message was sent
        example: 60d5f8b8e6b5f0b3e8b4b5b4
        type: string
      id:
        description: Unique identifier of the message
        example: 60d5f8b8e6b5f0b3e8b4b5b3
        type: string
      media_url:
        description: URL of the media
        example: https://example.com/image.jpg
        type: string
      message_type:
        description: Type of message
        enum:
        - text
        - picture
        - audio
        - video
        - text_and_picture
        - text_and_audio
        - text_and_video
        example: text
        type: string
      sender_id:
        description: ID of the user who sent the message
        example: 1
        type: integer
      sender_name:
        description: Username of the sender
        example: johndoe
        type: string
      sent_at:
        description: Timestamp when the message was sent
        example: "2023-01-01T12:00:00Z"
        type: string
      text_content:
        description: Text content of the message
        example: Hello, how are you?
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@ginchat.com
    name: API Support
    url: http://www.ginchat.com/support
  description: A real-time chat application API built with Gin framework
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: GinChat API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password to get authentication token
      parameters:
      - description: User Login Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      summary: Login a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Logout successful
          schema:
            additionalProperties: true
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
      security:
      - ApiKeyAuth: []
      summary: Logout a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with username, email and password
      parameters:
      - description: User Registration Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties: true
            type: object
        "409":
          description: User already exists
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - auth
  /chatrooms:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all available chatrooms
      produces:
      - application/json
      responses:
        "200":
          description: List of chatrooms
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.ChatroomResponse'
              type: array
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get all chatrooms
      tags:
      - chatrooms
    post:
      consumes:
      - application/json
      description: Create a new chatroom with the authenticated user as the creator
        and first member
      parameters:
      - description: Chatroom information
        in: body
        name: chatroom
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateChatroomRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Chatroom created successfully
          schema:
            additionalProperties:
              $ref: '#/definitions/models.ChatroomResponse'
            type: object
        "400":
          description: Invalid request body
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Chatroom with this name already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Create a new chatroom
      tags:
      - chatrooms
  /chatrooms/{id}/join:
    post:
      consumes:
      - application/json
      description: Add the authenticated user as a member of the specified chatroom
      parameters:
      - description: Chatroom ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Joined chatroom successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid chatroom ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Chatroom not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: User is already a member of this chatroom
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Join a chatroom
      tags:
      - chatrooms
  /chatrooms/{id}/messages:
    get:
      consumes:
      - application/json
      description: Retrieve messages from a chatroom with optional limit parameter
      parameters:
      - description: Chatroom ID
        in: path
        name: id
        required: true
        type: string
      - default: 50
        description: Maximum number of messages to retrieve
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of messages
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/models.MessageResponse'
              type: array
            type: object
        "400":
          description: Invalid chatroom ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: User is not a member of this chatroom
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Chatroom not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Get messages from a chatroom
      tags:
      - messages
    post:
      consumes:
      - application/json
      description: Send a message of various types (text, picture, audio, video, or
        combinations) to a chatroom
      parameters:
      - description: Chatroom ID
        in: path
        name: id
        required: true
        type: string
      - description: Message information
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/controllers.SendMessageRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Message sent successfully
          schema:
            additionalProperties:
              $ref: '#/definitions/models.MessageResponse'
            type: object
        "400":
          description: Invalid request body or chatroom ID
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "403":
          description: User is not a member of this chatroom
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Chatroom not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Send a message to a chatroom
      tags:
      - messages
  /media/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload an image, audio, or video file for use in messages
      parameters:
      - description: Message type (picture, audio, video, text_and_picture, text_and_audio,
          text_and_video)
        enum:
        - picture
        - audio
        - video
        - text_and_picture
        - text_and_audio
        - text_and_video
        in: formData
        name: message_type
        required: true
        type: string
      - description: Media file to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Media uploaded successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: User not authenticated
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Upload a media file
      tags:
      - media
schemes:
- http
- https
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
